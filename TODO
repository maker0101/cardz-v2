app todos

big:

- (greg) It's still unfortunately slow because of: (a) surprisingly long initial page load (200ms in hawaii - zbugs initial page load is 100ms), (b) three round trips at startup as opposed to two in zbugs (one getting route), (c) surprisingly slow db queries (30ms for top-20 vs near instant locally despite I think using NVMe disk in fly.io)
- (aaron) integrate with TS router layer - we should get automatic/elegant preloads

small:

- README
- When you run `clean` in dev and leave the UI open, the auth token starts failing to be accepted and you can only recover by logging out and in again. Should this be more automated somehow?
- add to cart button should be on mousedown - when we add this the remove accidentally happens
- clean up env vars more - it's super confusing right now which env vars are for which things. maybe each component (server, zero-cache, dev) should have its own section of .env with duplicate/interpolated vars
- change all the relative paths to use ~ shortcut - https://tanstack.com/start/latest/docs/framework/react/path-aliases
- make sure vercel deploy is sequenced after db migration

zero todos

- it would be nice to be able to ssr: true for startup reasons. not to cause zero to actually run server side or even be instanced, but just ZeroProvider to run so that modules can be sent to browser. But ZeroProvider does'nt render children if Zero is undefined.
- the pattern of making the zero instance reactive in zero-provider.ts feels right but (a) had to hack around current code in zero/react, and (b) took a fair amount of code. Can we make this easier? Need to consider having multiple zero instances live.
- stupid to have to useZero() just to form queries
  - this would make sharing query fragments more elegant too (see artist.tsx)
- exceeding 20k limit causes all data to get dropped - pretty surprising.
  - we should remove the limit
- fix @rocicorp/zero-sqlite3 for up arrow to work and document better
- warn about missing index on FK it makes zero crazy slow.
- errors about missing env vars shouldn't tell you to create .env. .env shouldn't be required.
- you should be able to start zero-cache w/o a schema.ts - it should at least replicate the data. schema not required for replication, only typing queries in client!
- it would be nice if tx.insert() returned the value.
  - consider also have ts.update() do this? kinda bummer to pay the cost to do this if not needed
  - maybe there's a `return` flag needed on insert() and update()
- zero-deploy-permissions should also pay attention to .env

Not doing

- Previews
  - going to do this via custom mutators / queries
- mooar data
  - we'll just explain curren status
- integrate with TS at the query layer. this would maybe get us partway to SSR and suspense - project for another time
- use real drizzle migrations - not really a zero thing
- nicer styles? - not doing the ugly styles are a feature - less goop to remove when using this as a starter
- text search
  - can be todo noted in docs/launch
- we should limit ttl to max 10m
  - erik doing
- client-only queries would significantly reduce load while typing
  - queries api is changing
- 500 errors in push don't cause revert - easy to not notice they aern't working
  - going to rework error handling
- conditional query (for when session is null and using userID in query)
  - queries api is changing
